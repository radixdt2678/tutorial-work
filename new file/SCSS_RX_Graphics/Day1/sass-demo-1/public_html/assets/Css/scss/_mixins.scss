@use 'sass:math';
@import 'responsive';

// Small devices

//
@mixin xsm {
    @media (max-width: #{$screen-xsm-max}) {
        @content;
    }
 }
@mixin sm {
    @media (max-width: #{$screen-sm-max}) {
        @content;
    }
 }

 // Medium devices
 @mixin md {
    @media (max-width: #{$screen-md-max}) {
        @content;
    }
 }
 
 // Large devices
 @mixin lg {
    @media (max-width: #{$screen-lg-max}) {
        @content;
    }
 }
 //
 @mixin xlg {
    @media (max-width: #{$screen-x-lg-max}) {
        @content;
    }
 }
 // Extra large devices

 @mixin xl {
    @media (max-width: #{$screen-xl-max}) {
        @content;
    }}
 //
 @mixin xxl {
    @media (max-width: #{$screen-xxl-max}) {
        @content;
    }
 }


 /* font-face */

@mixin font-face($style-name, $file, $family) {
    $filepath: '../fonts/' + $family + '/' + $file;

    @font-face {
        font-family: '#{$style-name}';
        src: url($filepath + '.woff') format('woff'),url($filepath + '.woff2') format('woff2');
    }
}

//padding, margin spacer vars 

$spacer: 16;
$max: 5;
$zero: 0px;
$one: unquote( ( $spacer * 0.25  ) + 'px' );
$two: unquote( ( $spacer * 0.5  ) + 'px' );
$three: unquote( ( $spacer ) + 'px' );
$four: unquote( ( $spacer * 1.5 ) + 'px' );
$five: unquote( ( $spacer * 3 ) + 'px' );

$spaces: ($zero, $one, $two, $three, $four, $five); // Adjust this to include the pixel amounts you need.
$sides: (x, y, all, top, bottom, left, right); // Leave this variable alone
$i: 0;
@each $space in $spaces {
    @each $side in $sides {
        @if $side == all {
            .pa-#{$i} {
                padding: #{$space} #{$space} !important;
            }
        } @else if $side == x {
            .px-#{$i} {
                padding-left: #{$space} !important;
                padding-right: #{$space} !important;
            }
        } @else if $side == y {
            .py-#{$i} {
                padding-top: #{$space} !important;
                padding-bottom: #{$space} !important;
            }
        } @else {
            .p#{str-slice($side, 0, 1)}-#{$i} {
                padding-#{$side}: #{$space} !important;
            }
        }
    }
    @each $side in $sides {
        @if $side == all {
            .ma-#{$i} {
                margin: #{$space} #{$space} !important;
            }
        } @else if $side == x {
            .mx-#{$i} {
                margin-left: #{$space} !important;
                margin-right: #{$space} !important;
            }
        } @else if $side == y {
            .my-#{$i} {
                margin-top: #{$space} !important;
                margin-bottom: #{$space} !important;
            }
        } @else {
            .m#{str-slice($side, 0, 1)}-#{$i} {
                margin-#{$side}: #{$space} !important;
            }
        }
    }
    $i: $i + 1;
}
//width col

@mixin cols{
     @for $i from 1 through 12{
         $width: calc($i / 12);
         .col-#{$i} {
            width: math.percentage($width);}
        }
}

//font
  @function pxToRem($pxSize) {
    @return $pxSize / 16 + rem;  
  }
  @mixin font-size() {
    @for $size from 12 through 64 {
      .font-#{$size} {
        font-size: pxToRem($size);
      }
    }
  }

  //font-weight

  @function font-weight($keyword) {
	$conversion-map: (
	  thin: 100,
	  hairline: 100,
	  extra light: 200,
	  extralight: 200,
	  ultra light: 200,
	  ultralight: 200,
	  light: 300,
	  book: 300,
	  demi: 300,
	  normal: 400,
	  regular: 400,
	  medium: 500,
	  semi bold: 600,
	  semibold: 600,
	  demi bold: 600,
	  demibold: 600,
	  bold: 700,
	  extra bold: 800,
	  extrabold: 800,
	  ultra bold: 800,
	  ultrabold: 800,
	  black: 900,
	  heavy: 900,
	  fat: 900,
	  poster: 900,
	  extra black: 900,
	  extrablack: 900,
	  ultra black: 900,
	  ultrablack: 900
	);

	@if not map-has-key($conversion-map, $keyword) {
		@error "Unsupported `font-weight` keyword `#{$keyword}`";
        
        @return null;
	}
    
    @return map-get($conversion-map, $keyword);
}

@mixin font-weight($keyword) {
    font-weight: font-weight($keyword);
}
